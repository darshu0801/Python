class LiquidTank:
    def __init__(self, max_capacity):
        self.max_capacity = max_capacity
        self.current_data = 0
        self.window = tk.Tk()
        self.window.title("SSD Storage Information")
        self.canvas = tk.Canvas(self.window, width=600, height=100)
        self.canvas.pack()

        # Define the tank dimensions
        self.tank_width = 500
        self.tank_outline = self.canvas.create_rectangle((50, 10), (550, 50), outline='black', width=3)
        self.liquid_segments = []

        self.max_label = tk.Label(self.window, text=f"Max Capacity(MB): {self.max_capacity}")
        self.max_label.pack()
        self.current_label = tk.Label(self.window, text=f"Current Data(MB): {self.current_data}")
        self.current_label.pack()

    def update_data(self, current_data, dbksmb):
        self.current_data = current_data
        self.add_liquid_segment(dbksmb)
        self.current_label.config(text=f"Current Data(MB): {self.current_data}")

    def add_liquid_segment(self, dbksmb):
        global threshold, threshold1
        filling_ratio = self.current_data / self.max_capacity
        total_filling_width = filling_ratio * self.tank_width

        # Determine the color based on the current dbksmb value
        if (dbksmb < threshold + 10) and (dbksmb > threshold - 10):
            color = 'red'
        elif dbksmb == 0:
            color = 'green'
        else:
            color = 'blue'

        if self.liquid_segments:
            last_segment = self.liquid_segments[-1]
            last_filling_width = last_segment['end']
        else:
            last_filling_width = 50

        # Ensure the new segment does not exceed the tank width
        new_filling_width = min(total_filling_width, self.tank_width)
        
        new_segment = {
            'color': color,
            'start': last_filling_width,
            'end': last_filling_width + (new_filling_width - last_filling_width)
        }
        self.liquid_segments.append(new_segment)
        self.draw_liquid()

    def draw_liquid(self):
        self.canvas.delete("liquid")  # Clear previous liquid segments
        for segment in self.liquid_segments:
            self.canvas.create_rectangle((segment['start'], 10), (segment['end'], 50), fill=segment['color'], outline="", tags="liquid")

    def start(self):
        self.window.mainloop()