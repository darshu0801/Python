import configparser

ini_path = r"C:\Path\To\HWiNFO64.INI"
fake_section = "DUMMY"

# Read INI with fake section header
with open(ini_path, 'r') as file:
    content = file.read()
    content_with_header = f"[{fake_section}]\n" + content

config = configparser.ConfigParser()
config.read_string(content_with_header)

# Modify SensorInterval value
config[fake_section]['SensorInterval'] = '1000'

# Save back without the dummy header
with open(ini_path, 'w') as file:
    for key in config[fake_section]:
        file.write(f"{key}={config[fake_section][key]}\n")




import winreg

key_path = r"Software\HWiNFO64\Sensors"
value_name = "HotKeyLoggingStart"  # or whatever it is in your registry

vk_code = 0x4C  # 'L'
modifiers = 0x2  # Ctrl
combined_value = (modifiers << 16) | vk_code  # (0x2 << 16) | 0x4C = 0x2004C

try:
    with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:
        winreg.SetValueEx(key, value_name, 0, winreg.REG_DWORD, combined_value)
        print(f"Set hotkey to Ctrl+L (0x{combined_value:X}) successfully.")
except Exception as e:
    print("Error:", e)







ini_path = r"C:\Path\To\HWiNFO64.INI"

# Define the key-value pairs to update or add
new_settings = {
    "SensorOnly": "1",
    "SensorInterval": "1000",
    "SmartScanRate": "1",
    "OpenSystemSummary": "0",
    "ShowWelcomeAndProgress": "0"
}

# Read the existing lines
with open(ini_path, 'r') as file:
    lines = file.readlines()

# Process and update
updated_lines = []
keys_found = set()

for line in lines:
    if '=' in line:
        key, value = line.strip().split('=', 1)
        if key in new_settings:
            updated_lines.append(f"{key}={new_settings[key]}\n")
            keys_found.add(key)
        else:
            updated_lines.append(line)
    else:
        updated_lines.append(line)

# Add any new keys that were not in the file
for key, value in new_settings.items():
    if key not in keys_found:
        updated_lines.append(f"{key}={value}\n")

# Write back
with open(ini_path, 'w') as file:
    file.writelines(updated_lines)





ini_path = r"C:\Path\To\HWiNFO64.INI"

settings = {
    "SensorOnly": "1",
    "SensorInterval": "1000",
    "SmartScanRate": "1",
    "OpenSystemSummary": "0",
    "ShowWelcomeAndProgress": "0"
}

with open(ini_path, 'w') as file:
    file.write("[Settings]\n")
    for key, value in settings.items():
        file.write(f"{key}={value}\n")















import subprocess
import os

def run_cmd(cmd):
    subprocess.run(cmd, shell=True, check=True)

def set_screen_and_sleep_never():
    run_cmd("powercfg /change monitor-timeout-ac 0")
    run_cmd("powercfg /change monitor-timeout-dc 0")
    run_cmd("powercfg /change standby-timeout-ac 0")
    run_cmd("powercfg /change standby-timeout-dc 0")

def set_best_performance_mode():
    run_cmd("powercfg /setactive SCHEME_MIN")

def configure_battery_saver():
    import winreg as reg

    path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\EnergySaver\Settings"
    try:
        with reg.OpenKey(reg.HKEY_LOCAL_MACHINE, path, 0, reg.KEY_SET_VALUE) as key:
            reg.SetValueEx(key, "EnergySaverPolicy", 0, reg.REG_DWORD, 0)
            reg.SetValueEx(key, "BatterySaverBrightnessReduction", 0, reg.REG_DWORD, 0)
            reg.SetValueEx(key, "BatterySaverOnThreshold", 0, reg.REG_DWORD, 0)
    except PermissionError:
        print("Run as Administrator to edit battery saver settings in the registry.")

def set_advanced_power_settings():
    result = subprocess.run("powercfg /getactivescheme", shell=True, capture_output=True, text=True)
    line = result.stdout.strip()
    plan_guid = line.split(":")[1].strip().split(' ')[0]

    run_cmd(f"powercfg /setacvalueindex {plan_guid} SUB_DISK DISKIDLE 0")
    run_cmd(f"powercfg /setdcvalueindex {plan_guid} SUB_DISK DISKIDLE 0")
    run_cmd(f"powercfg /setacvalueindex {plan_guid} SUB_PCIEXPRESS ASPM 2")
    run_cmd(f"powercfg /setdcvalueindex {plan_guid} SUB_PCIEXPRESS ASPM 2")
    run_cmd(f"powercfg /setactive {plan_guid}")

def set_screen_brightness_100():
    try:
        import wmi
        w = wmi.WMI(namespace='wmi')
        methods = w.WmiMonitorBrightnessMethods()[0]
        methods.WmiSetBrightness(Brightness=100, Timeout=0)
    except Exception as e:
        print(f"Failed to set brightness: {e}")

if __name__ == "__main__":
    set_screen_and_sleep_never()
    set_best_performance_mode()
    configure_battery_saver()
    set_advanced_power_settings()
    set_screen_brightness_100()