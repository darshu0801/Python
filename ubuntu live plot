#!/bin/bash

# Log file for data
LOG_FILE="/tmp/ssd_usage.log"
DEVICE="nvme0n1"  # Change this to match your SSD device

# Clear previous data
echo "" > $LOG_FILE

# Start iostat monitoring
echo "Monitoring SSD performance... Press Ctrl+C to stop."

# Run iostat every second and log results
( while true; do
    iostat -dx 1 1 | awk -v dev="$DEVICE" '$1 == dev {print strftime("%H:%M:%S"), $6, $7}' >> $LOG_FILE
    sleep 1
done ) &

# Start gnuplot for live plotting
gnuplot -persist <<-EOF
    set title "Live SSD Performance"
    set xlabel "Time"
    set ylabel "Speed (MB/s)"
    set yrange [0:*]
    set key outside
    set grid
    set datafile separator " "
    set xdata time
    set timefmt "%H:%M:%S"
    set format x "%H:%M:%S"
    plot "< tail -n 60 $LOG_FILE" using 1:2 with lines title "Read MB/s", \
         "< tail -n 60 $LOG_FILE" using 1:3 with lines title "Write MB/s"
    pause 1
    reread
EOF












Warning: empty x range [59794:59794], adjusting to [59196.1:60391.9]
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'










#!/bin/bash

LOG_FILE="/tmp/ssd_usage.log"
DEVICE="nvme0n1"  # Change to your SSD name

# Clear log file
echo "" > $LOG_FILE

echo "Monitoring SSD performance... Press Ctrl+C to stop."

while true; do
    # Get iostat output
    OUTPUT=$(iostat -dx 1 1 | awk -v dev="$DEVICE" '$1 == dev {print $6, $7}')

    # Get current timestamp
    TIMESTAMP=$(date '+%H:%M:%S')

    # Ensure data is valid and prevent duplicates
    if [[ ! -z "$OUTPUT" ]]; then
        LAST_ENTRY=$(tail -n 1 $LOG_FILE)
        NEW_ENTRY="$TIMESTAMP $OUTPUT"

        if [[ "$LAST_ENTRY" != "$NEW_ENTRY" ]]; then
            echo "$NEW_ENTRY" >> $LOG_FILE
        fi
    fi

    sleep 1
done








set title "Live SSD Performance"
set xlabel "Time"
set ylabel "Speed (MB/s)"
set xdata time
set timefmt "%H:%M:%S"
set format x "%H:%M:%S"
set grid
set key outside
set yrange [0:*]
set xtics rotate by -30

plot "< tail -n 60 /tmp/ssd_usage.log" using 1:2 with lines title "Read MB/s", \
     "< tail -n 60 /tmp/ssd_usage.log" using 1:3 with lines title "Write MB/s"

pause 1
reread










import matplotlib.pyplot as plt
import matplotlib.animation as animation
import psutil
import time
from collections import deque

# Parameters
history_length = 60  # Store last 60 seconds of data

# Data storage
timestamps = deque(maxlen=history_length)
read_speeds = deque(maxlen=history_length)
write_speeds = deque(maxlen=history_length)

# Get the correct disk name
ssd_disk = None
for disk in psutil.disk_partitions():
    if "nvme" in disk.device or "sd" in disk.device:  # Adjust this for your SSD
        ssd_disk = disk.device
        break

if not ssd_disk:
    print("No SSD detected. Check your disk name.")
    exit(1)

def update(frame):
    global timestamps, read_speeds, write_speeds

    # Fetch SSD disk usage stats
    disk_io = psutil.disk_io_counters(perdisk=True)

    # Extract read/write speed
    if ssd_disk in disk_io:
        read_speed = disk_io[ssd_disk].read_bytes / (1024 * 1024)  # Convert to MB
        write_speed = disk_io[ssd_disk].write_bytes / (1024 * 1024)  # Convert to MB
    else:
        read_speed, write_speed = 0, 0

    # Update data
    timestamps.append(time.strftime('%H:%M:%S'))
    read_speeds.append(read_speed)
    write_speeds.append(write_speed)

    # Clear and re-plot
    ax.clear()
    ax.plot(timestamps, read_speeds, label="Read Speed (MB/s)", color='b')
    ax.plot(timestamps, write_speeds, label="Write Speed (MB/s)", color='r')

    ax.set_xlabel('Time')
    ax.set_ylabel('Speed (MB/s)')
    ax.set_title(f'Live SSD Performance ({ssd_disk})')
    ax.legend()
    ax.grid(True)
    plt.xticks(rotation=45)

# Initialize plot
fig, ax = plt.subplots(figsize=(10, 5))
ani = animation.FuncAnimation(fig, update, interval=1000)  # Update every second

plt.show()












import matplotlib.pyplot as plt
import matplotlib.animation as animation
import subprocess
from collections import deque

# Set SSD device name (change if needed)
SSD_DEVICE = "nvme0n1"  # Change this to your SSD name

# Store the last N data points (e.g., 300 points)
history_length = 300  
counter = 1  # Start counter for X-axis

# Data storage
x_values = deque(maxlen=history_length)
read_speeds = deque(maxlen=history_length)
write_speeds = deque(maxlen=history_length)

def get_ssd_stats():
    """Fetch SSD read/write speeds using iostat -dxm 1 1"""
    try:
        result = subprocess.run(
            ["iostat", "-dxm", "1", "1"], capture_output=True, text=True
        )
        lines = result.stdout.split("\n")

        for line in lines:
            parts = line.split()
            if len(parts) >= 9 and parts[0] == SSD_DEVICE:
                read_speed = float(parts[1])  # Read MB/s (Column 2, Index 1)
                write_speed = float(parts[7])  # Write MB/s (Column 8, Index 7)
                return read_speed, write_speed
    except Exception as e:
        print("Error fetching SSD stats:", e)

    return 0, 0  # Return 0 if iostat fails

def update(frame):
    """Update the live plot while keeping older data"""
    global counter
    read_speed, write_speed = get_ssd_stats()

    # Append new data with incrementing X values
    x_values.append(counter)
    read_speeds.append(read_speed)
    write_speeds.append(write_speed)
    counter += 1  # Increment X-axis value

    # Clear previous plot and redraw
    ax.clear()
    ax.plot(x_values, read_speeds, label="Read MB/s", color='b', linewidth=2)
    ax.plot(x_values, write_speeds, label="Write MB/s", color='r', linewidth=2)

    # Set labels, title, and formatting
    ax.set_xlabel('Time (seconds)')
    ax.set_ylabel('Speed (MB/s)')
    ax.set_title(f'Live SSD Performance ({SSD_DEVICE})')
    ax.legend()
    ax.grid(True)

    # Keep X-axis scrolling
    ax.set_xlim(max(0, counter - history_length), counter)  
    plt.xticks(rotation=45)

# Initialize plot
fig, ax = plt.subplots(figsize=(10, 5))
ani = animation.FuncAnimation(fig, update, interval=1000)  # Update every second

plt.show()
