#!/bin/bash

# Function to get the OS drive
get_os_drive() {
    OS_PART=$(lsblk -o NAME,MOUNTPOINT | grep " /boot/efi" | awk '{print $1}' | tr -d '├ ─')
    OS_DRIVE=$(echo "$OS_PART" | sed 's/p[0-9]\+$//')
    echo "/dev/$OS_DRIVE"
}

# List available drives for user selection
echo "Available drives:"
#DRIVES1=($(lsblk -d -n -o NAME | grep -E "nvme|sd"))  # Store drive names in an array]
DRIVES=($(nvme list | awk 'NR>2 {print $1}'))  # Store drive names in an array]


# Display drive list
for i in "${!DRIVES[@]}"; do
    DRIVE_INFO=$(nvme list | grep "${DRIVES[$i]}")
    MODEL=$(echo "$DRIVE_INFO" | awk '{print $3, $4, $5, $6}')
    SIZE=$(echo "$DRIVE_INFO" | awk '{print $11, $12, $13}')
    echo "$((i+1))) ${DRIVES[$i]} | Model: $MODEL | Size: $SIZE"
done

# Prompt user to select a drive
read -p "Select the drive number to run tests on: " CHOICE

# Validate input
if [[ ! "$CHOICE" =~ ^[0-9]+$ ]] || ((CHOICE < 1 || CHOICE > ${#DRIVES[@]})); then
    echo "Invalid selection. Exiting."
    exit 1
fi

# Set the selected drive
TARGET_DRIVE="${DRIVES[$((CHOICE-1))]}"
#echo $TARGET_DRIVE
OS_DRIVE=$(get_os_drive)
#echo $OS_DRIVE


# Check if the selected drive is the OS drive
if [[ "$TARGET_DRIVE" == "$(get_os_drive)" ]]; then
    echo "Error: You are trying to run FIO on the OS drive ($TARGET_DRIVE). Aborting!"
    exit 1
fi

echo "Selected drive: $TARGET_DRIVE"


# Read firmware file location from FW_LOCATION.txt
if [[ ! -f FW_LOCATION.txt ]]; then
    echo "Error: FW_LOCATION.txt not found."
    exit 1
fi

FW_FILE=$(head -n 1 FW_LOCATION.txt)

if [[ ! -f "$FW_FILE" ]]; then
    echo "Error: Firmware file not found at $FW_FILE"
    exit 1
fi

echo "Firmware file: $FW_FILE"

TARGET_DRIVE1=$(echo "$TARGET_DRIVE" | sed -E 's|(nvme[0-9]+).*|\1|')

echo "UPDATING THE FW......"
# Firmware Update
nvme fw-download $TARGET_DRIVE1 --fw=$FW_FILE --xfer=0x20000
nvme fw-commit $TARGET_DRIVE1 --slot=0 --action=1
nvme reset $TARGET_DRIVE1

echo "NVME RESET DONE"

sleep 3

rm -rf RESULT

echo "DELETED RESULT FOLDER"

mkdir RESULT

sleep 3

echo "STARTING WORKLOADS"

# Run FIO workloads

# SW_SLC
fio --name=SeqWrite --rw=write --bs=128k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=1 --size=1G --time_based --runtime=120s --write_bw_log=RESULT/SW_SLC --log_avg_msec=1000 --output=RESULT/SW_SLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/SW_SLC.txt

# SR_SLC
fio --name=SeqRead --rw=read --bs=128k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=1 --size=1G --time_based --runtime=300s --write_bw_log=RESULT/SR_SLC --log_avg_msec=1000 --output=RESULT/SR_SLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/SR_SLC.txt

# RR_SLC
fio --name=RanRead --rw=randread --bs=4k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=16 --size=1G --time_based --runtime=120s --write_iops_log=RESULT/RR_SLC --log_avg_msec=1000 --output=RESULT/RR_SLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/RR_SLC.txt

# Idle 1
sleep 120
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/idle.txt

# SW_TLC
fio --name=SeqWrite --rw=write --bs=128k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=1 --size=100% --time_based --runtime=120s --write_bw_log=RESULT/SW_TLC1 --log_avg_msec=1000 --output=RESULT/SW_TLC1.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/SW_TLC1.txt

# Idle 2
sleep 300
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/idle.txt

# SW_TLC (Long run)
fio --name=SeqWrite --rw=write --bs=128k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=1 --size=100% --time_based --runtime=10000s --write_bw_log=RESULT/SW_TLC --log_avg_msec=1000 --output=RESULT/SW_TLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/SW_TLC.txt

# Idle 3
sleep 300
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/idle.txt

# SR_TLC
fio --name=SeqRead --rw=read --bs=128k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=1 --size=100% --time_based --runtime=120s --write_bw_log=RESULT/SR_TLC --log_avg_msec=1000 --output=RESULT/SR_TLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/SR_TLC.txt

# RR_TLC
fio --name=RanRead --rw=randread --bs=4k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=16 --size=100% --time_based --runtime=120s --write_iops_log=RESULT/RR_TLC --log_avg_msec=1000 --output=RESULT/RR_TLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/RR_TLC.txt

# Firmware Update
nvme fw-download $TARGET_DRIVE1 --fw=$FW_FILE --xfer=0x20000
nvme fw-commit $TARGET_DRIVE1 --slot=0 --action=1
nvme reset $TARGET_DRIVE1

echo "NVME RESET DONE"

# RW_SLC
fio --name=RanWrite --rw=randwrite --bs=4k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=16 --norandommap --randrepeat=0 --size=1G --time_based --runtime=120s --write_iops_log=RESULT/RW_SLC --log_avg_msec=1000 --output=RESULT/RW_SLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/RW_SLC.txt

# Idle 4
sleep 120

# RW_TLC
fio --name=RanWrite --rw=randwrite --bs=4k --ioengine=libaio --iodepth=128 --direct=1 --filename=$TARGET_DRIVE --numjobs=16 --norandommap --randrepeat=0 --size=100% --time_based --runtime=120s --write_iops_log=RESULT/RW_TLC --log_avg_msec=1000 --output=RESULT/RW_TLC.txt
nvme smart-log $TARGET_DRIVE | grep temperature | tee -a RESULT/RW_TLC.txt

echo "Script execution completed."
